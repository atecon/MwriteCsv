<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="StoreMatrixAsCsv" no-data-ok="true" minver="2018a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.5</version>
<date>2019-12-10</date>
<description>Write matrix to csv</description>
<tags>C81</tags>
<help>
Written by Artur Tarassow (please ask questions and report bugs on the gretl mailing list if possible).

Source code and test script(s) can be found here:
https://github.com/atecon/StoreMatrixAsCsv

Writes the matrix X to a csv-file named filename. In case matrix X comprises column labels, these will be treated as header column labels. If matrix X comprises row labels, these will be added as a string valued column at the first position.

If a file filenam already exists, it will be overwritten. The return value is 0 on successful completion; if an error occurs, such as the file being unwritable, the return value will be non-zero.

The output file will be written in the currently set workdir, unless the filename string contains a full path specification.

Output:		integer
Arguments:	X (matrix)
		filename (string)
		delimiter (string, either ',' or ';', default ';')
-----------------------------------------------

Changelog:
- v0.5, December 2019:
    + initial release
</help>
<gretl-function name="StoreMatrixAsCsv" type="scalar">
 <params count="3">
  <param name="m" type="matrix" const="true"/>
  <param name="filename" type="string">
<description>Path+filename</description>
  </param>
  <param name="delimiter" type="string" optional="true" const="true">
<description>Column separator: ',' or ';' (default ',')</description>
  </param>
 </params>
<code>/* Writes matrix m to a csv file. */
if !valid_filename(filename) || !valid_matrix(m)
  return 1
endif
string filename = add_non_existing_file_type(filename)
strings col_labels = cnameget(m)
strings row_labels = rnameget(m)
if !exists(delimiter)
  string delimiter = &quot;,&quot;
endif
write_header(col_labels, row_labels, delimiter, filename)
write_values(m, row_labels, delimiter, filename)
return 0
</code>
</gretl-function>
<gretl-function name="valid_matrix" type="scalar" private="1">
 <params count="1">
  <param name="m" type="matrix" const="true"/>
 </params>
<code>if rows(m) == 0 || cols(m) == 0
  printf &quot;\nError: Empty matrix provided.\n&quot;
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="valid_filename" type="scalar" private="1">
 <params count="1">
  <param name="filename" type="string" const="true"/>
 </params>
<code>if strlen(filename) == 0 || filename == &quot;.csv&quot;
  printf &quot;\nError: Invalid filename.\n&quot;
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="add_non_existing_file_type" type="string" private="1">
 <params count="1">
  <param name="filename" type="string"/>
 </params>
<code>/* Search for file type '.csv' in filename. If not found,
add '.csv' to string filename. */
string filename = tolower(filename)
search_for_csv = strlen(strstr(filename, &quot;.csv&quot;))
if search_for_csv == 4			# found '.csv' in filename
  return filename
else
  filename = sprintf(&quot;%s.csv&quot;, filename)
  return filename
endif
</code>
</gretl-function>
<gretl-function name="write_values" type="void" private="1">
 <params count="4">
  <param name="m" type="matrix" const="true"/>
  <param name="row_labels" type="strings" const="true"/>
  <param name="delimiter" type="string" const="true"/>
  <param name="filename" type="string" const="true"/>
 </params>
<code>/* Write row labels of input matrix to additional column
(positioned 1st) and write all matrix values into string. */
scalar n_rows = rows(m)
scalar n_cols = cols(m)
cnameset(m, &quot;&quot;)			# necessary reset of colum names
catch outfile @filename --append --quiet
  loop row_loop=1..n_rows -q
    if nelem(row_labels) &gt; 0
      printf &quot;%s%s &quot;, row_labels[row_loop], delimiter
    endif
    string s = strstrip(sprintf(&quot;%16.10g&quot;, m[row_loop,]))
    printf &quot;%s\n&quot;,  regsub(s, &quot;\s+&quot;, delimiter)
  endloop
end outfile
</code>
</gretl-function>
<gretl-function name="write_header" type="void" private="1">
 <params count="4">
  <param name="col_labels" type="strings" const="true"/>
  <param name="row_labels" type="strings" const="true"/>
  <param name="delimiter" type="string" const="true"/>
  <param name="filename" type="string" const="true"/>
 </params>
<code>/* Write column labels as headers into a string. */
scalar c = nelem(col_labels)
outfile @filename --quiet
  if c &gt; 0
    if nelem(row_labels) &gt; 0
      printf &quot;row_labels%s &quot;, delimiter
    endif
    loop i=1..c -q
      printf &quot;%s&quot;, col_labels[i]
      if i &lt; c
        printf &quot;%s &quot;, delimiter
      endif
    endloop
    printf &quot;\n&quot;
  endif
end outfile
</code>
</gretl-function>
<sample-script>
set verbose off
clear

include StoreMatrixAsCsv.gfn

scalar n_rows = 5
matrix m = mnormal(n_rows, 5)
cnameset(m, &quot;A B C D E&quot;)
strings rnam = array(n_rows)
loop i=1..n_rows -q
    rnam[i] = sprintf(&quot;R%d&quot;, $i)
endloop
rnameset(m, rnam)
m[1,1] = NA

StoreMatrixAsCsv(m, &quot;foo.csv&quot;)

eval readfile(&quot;foo.csv&quot;)
open &quot;foo.csv&quot; -p -q
</sample-script>
</gretl-function-package>
</gretl-functions>
