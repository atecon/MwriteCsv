function scalar MwriteCsv (const matrix m,
                           string filename "Path+filename",
                           const string delimiter[null] "Column separator: ';' or ',' (default ';')")
    /* Main public function. */

    if !valid_filename(filename) || !valid_matrix(m)
        return 1
    endif

    string filename = add_non_existing_file_type(filename)
    strings col_labels = cnameget(m)
    strings row_labels = rnameget(m)

    if !exists(delimiter)
        string delimiter = ";"
    endif

    write_header(col_labels, row_labels, delimiter, filename)
    write_values(m, col_labels, row_labels, delimiter, filename)

    return 0
end function


function scalar valid_matrix (const matrix m)
    if rows(m) == 0 || cols(m) == 0
        printf "\nError: Empty matrix provided.\n"
        return 0
    else
        return 1
    endif
end function


function scalar valid_filename (const string filename)
    if strlen(filename) == 0 || filename == ".csv"
        printf "\nError: Invalid filename.\n"
        return 0
    else
        return 1
    endif
end function


function string add_non_existing_file_type (string filename)
/* Search for file type '.csv' in filename. If not found,
      add '.csv' to string filename. */

    string filename = tolower(filename)

    search_for_csv = strlen(strstr(filename, ".csv"))
    if search_for_csv == 4			# found '.csv' in filename
        return filename
    else
        filename = sprintf("%s.csv", filename)
        return filename
    endif
end function


function void write_values (const matrix m,
                            const strings col_labels,
                            const strings row_labels,
                            const string delimiter,
                            const string filename)
    /* Write values of matrix m. Eventually existing row labels
    (strings) of input matrix m are written to an additional column
    (positioned last). */

    scalar n_rows = rows(m)
    scalar n_cols = cols(m)
    scalar with_labels = (nelem(row_labels)>0 && nelem(col_labels) > 0)
    
    cnameset(m, "")			# necessary reset of colum names

    catch outfile @filename --append --quiet

        loop row_loop=1..n_rows -q
            string s = strstrip(sprintf("%20.16g", m[row_loop,]))
            printf "%s",  regsub(s, "\s+", delimiter)
            
            if with_labels
                printf "%s", delimiter
                printf "%s", row_labels[row_loop]
            endif

            printf "\n"
        endloop

    end outfile

    if $error
        printf "\nError: Cannot write values.\n"
    endif
end function


function void write_header (const strings col_labels,
                            const strings row_labels,
                            const string delimiter,
                            const string filename)
    /* Write column labels as headers into a string. Eventually
    existing row labels will be placed last. */

    scalar c = nelem(col_labels)
    scalar with_row_labels = nelem(row_labels) > 0

    catch outfile @filename --quiet

        if c > 0
            loop i=1..c -q
                printf "%s", col_labels[i]
                if with_row_labels
                    printf "%s", delimiter
                endif
            endloop

            if with_row_labels
                printf "row_labels"
            endif

            printf "\n"
        endif

    end outfile

    if $error
        printf "\nError: Cannot write headers.\n"
    endif
end function
