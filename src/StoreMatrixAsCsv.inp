function void StoreMatrixAsCsv (const matrix m,
                             string filename "Path+filename",
                             const bool row_labels_to_column[1] "Write row labels to 1st column",
                             const string delimiter[null] "Column separator: ',' or ';' (default ',')",
                             const bool verbose[1])
    /* Writes matrix m to a csv file. */

    string filename = search_for_csv_and_add(filename)
    strings col_labels = cnameget(m)
    strings row_labels = rnameget(m)
    scalar has_row_labels = strlen(flatten(row_labels, 1))		# number of chars in row-names
    scalar print_row_labels = 0
    print_row_labels = (row_labels_to_column==1 && has_row_labels>1)
    if !exists(delimiter)
        string delimiter = ","
    endif

    write_header(col_labels, print_row_labels, delimiter, filename)
    write_values(m, col_labels, row_labels, print_row_labels, delimiter, filename)
end function


function string search_for_csv_and_add (string filename)
/* Search for file type '.csv' in filename. If not found,
      add '.csv' to string filename. */

    search_for_csv = strlen(strstr(filename, ".csv"))
    if search_for_csv == 4			# found '.csv' in filename
        return filename
    else
        filename = sprintf("%s.csv", filename)
        return filename
    endif
end function


function void write_values (const matrix m,
                            const strings col_labels,
                            const strings row_labels,
                            const bool print_row_labels,
                            const string delimiter,
                            const string filename)
    /* Write row labels of input matrix to additional column
    (positioned 1st) and write all matrix values into string. */

    scalar n_rows = rows(m)
    scalar n_cols = cols(m)

    cnameset(m, "")

    catch outfile @filename --append --quiet

        loop row_loop=1..n_rows -q
            if print_row_labels
                printf "%s%s ", row_labels[row_loop], delimiter
            endif

            string s = strstrip(sprintf("%16.10g", m[row_loop,]))
            printf "%s\n",  regsub(s, "\s+", delimiter)
        endloop

    end outfile
end function


function void write_header (const strings col_labels,
                            const bool print_row_labels,
                            const string delimiter,
                            const string filename)
    /* Write column labels as headers into a string. */

    scalar c = nelem(col_labels)

    outfile @filename --quiet

        if c > 0
            if print_row_labels
                printf "row_labels%s ", delimiter
            endif

            loop i=1..c -q
                printf "%s", col_labels[i]
                if i < c
                    printf "%s ", delimiter
                endif
            endloop
            printf "\n"
        endif

    end outfile
end function

