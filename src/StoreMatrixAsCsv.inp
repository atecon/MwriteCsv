function scalar StoreMatrixAsCsv (const matrix m,
                                  string filename "Path+filename",
                                  const string delimiter[null] "Column separator: ',' or ';' (default ',')")
    /* Writes matrix m to a csv file. */
    
    if !valid_filename(filename) || !valid_matrix(m)
        return 1
    endif

    string filename = add_non_existing_file_type(filename)
    strings col_labels = cnameget(m)
    strings row_labels = rnameget(m)
    
    if !exists(delimiter)
        string delimiter = ","
    endif

    write_header(col_labels, row_labels, delimiter, filename)
    write_values(m, row_labels, delimiter, filename)
    
    return 0
end function


function scalar valid_matrix (const matrix m)
    if rows(m) == 0 || cols(m) == 0
        printf "\nError: Empty matrix provided.\n"
        return 0
    else
        return 1
    endif
end function


function scalar valid_filename (const string filename)
    if strlen(filename) == 0 || filename == ".csv"
        printf "\nError: Invalid filename.\n"
        return 0
    else
        return 1
    endif
end function


function string add_non_existing_file_type (string filename)
/* Search for file type '.csv' in filename. If not found,
      add '.csv' to string filename. */

    string filename = tolower(filename)

    search_for_csv = strlen(strstr(filename, ".csv"))
    if search_for_csv == 4			# found '.csv' in filename
        return filename
    else
        filename = sprintf("%s.csv", filename)
        return filename
    endif
end function


function void write_values (const matrix m,
                            const strings row_labels,
                            const string delimiter,
                            const string filename)
    /* Write row labels of input matrix to additional column
    (positioned 1st) and write all matrix values into string. */

    scalar n_rows = rows(m)
    scalar n_cols = cols(m)

    cnameset(m, "")			# necessary reset of colum names

    catch outfile @filename --append --quiet

        loop row_loop=1..n_rows -q
            if nelem(row_labels) > 0
                printf "%s%s ", row_labels[row_loop], delimiter
            endif

            string s = strstrip(sprintf("%16.10g", m[row_loop,]))
            printf "%s\n",  regsub(s, "\s+", delimiter)
        endloop

    end outfile
end function


function void write_header (const strings col_labels,
                            const strings row_labels,
                            const string delimiter,
                            const string filename)
    /* Write column labels as headers into a string. */

    scalar c = nelem(col_labels)

    outfile @filename --quiet

        if c > 0
            if nelem(row_labels) > 0
                printf "row_labels%s ", delimiter
            endif

            loop i=1..c -q
                printf "%s", col_labels[i]
                if i < c
                    printf "%s ", delimiter
                endif
            endloop
            printf "\n"
        endif

    end outfile
end function

