<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="mat2data" minver="2018a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.6</version>
<date>2020-03-30</date>
<description>Write matrix as dataset to some file (e.g. csv, gdt)</description>
<tags>C81</tags>
<help>
Written by Artur Tarassow (please ask questions and report bugs on the gretl mailing list if possible).

Source code and test script(s) can be found here:
https://github.com/atecon/mat2data

Stores matrix X to some data file named 'filename'. In case matrix X comprises column labels, these will be treated as header labels. Additionally, if matrix X comprises row labels, these will be added as a string-valued column.

The output is archived in the format as specified in 'filename'. All file-formats as supported by gretl can be chosen, e.g. csv, txt, gdt or gdtb. If no format-extension is provided, '.gdt' is added automatically.

The output file will be written in the currently set &quot;workdir&quot;, unless &quot;filename&quot; contains a full path specification. If a file filename already exists at the target directory, it will be overwritten.

Note: The package only works if an data set is opened (either via the 'open' or 'nulldata' commands).

Output:		integer
Arguments:	X (matrix)
			filename (string)
Return:
Returns a zero integer on successful completion, otherwise 1.
-----------------------------------------------------------------------


Changelog:
- v0.6, March 2020:
	+ handle previously sub-sampled data sets
- v0.5, December 2019:
    + initial release
</help>
<depends count="1">
string_utils </depends>
<gretl-function name="mat2data" type="scalar">
 <params count="3">
  <param name="m" type="matrix" const="true"/>
  <param name="filename" type="string">
<description>Path+filename</description>
  </param>
  <param name="store_arguments" type="string" optional="true" const="true">
<description>(untested) Options for 'store' command</description>
  </param>
 </params>
<code>if $datatype == 0
  printf &quot;\nError: No dataset exists.\n&quot;
  return 1
endif
if !valid_filename(filename) || !valid_matrix(m)
  return 1
endif
if !exists(store_arguments)
  string store_arguments = &quot;&quot;
else
  printf &quot;\nError: Argument 'store_arguments' not supported, yet.\n&quot;
  return 1
endif
# Addings obs cannot be put into a separate function (added obs would get lost)
scalar T = rows(m)
if T &lt;= $tmax
  catch smpl 1 T
  if $error
    series observation = seq(1,$nobs)'
    smpl observation &lt;= T --restrict
  endif
else
  smpl 1 $tmax
  scalar Tadd = T - $nobs
  dataset addobs Tadd
endif
list L = matrix_to_list(m, cnameget(m), rnameget(m))
scalar err = store_list(L, filename, store_arguments)
return err
</code>
</gretl-function>
<gretl-function name="store_list" type="scalar" private="1">
 <params count="3">
  <param name="L" type="list" const="true"/>
  <param name="filename" type="string" const="true"/>
  <param name="store_arguments" type="string" const="true"/>
 </params>
<code>/* Store list of series. */
catch store &quot;@filename&quot; L @store_arguments
if $error
  printf &quot;\nError: Could not store file '%s'.\n&quot;, filename
  return 1
else
  return 0
endif
</code>
</gretl-function>
<gretl-function name="matrix_to_list" type="list" private="1">
 <params count="3">
  <param name="m" type="matrix" const="true"/>
  <param name="column_labels" type="strings" const="true"/>
  <param name="row_labels" type="strings" const="true"/>
 </params>
<code>/* Cast colum-vectors as series and put series to a list.
Name series accordingly to eventually existing column-labels.
In case row-labels exist, put another string-values series to
the list. */
list L = null
loop i=1..cols(m) -q
  list L += genseries(get_column_name(column_labels, $i), m[,i])
endloop
if nelem(row_labels) &gt; 0
  string vname = &quot;row_label&quot;
  series @vname
  list L += genseries(vname, get_str_valued_series(row_labels, &amp;@vname))
endif
return L
</code>
</gretl-function>
<gretl-function name="get_str_valued_series" type="series" private="1">
 <params count="2">
  <param name="S" type="strings" const="true"/>
  <param name="ret" type="seriesref"/>
 </params>
<code>/* Generate string-valued series comprising row labels. */
series y = map_uniq_str_to_int_series(S)
series ret = y		# see manual sec. 15.4: &quot;ret&quot; must be assigned by y!
stringify(ret, S)
return ret
</code>
</gretl-function>
<gretl-function name="get_column_name" type="string" private="1">
 <params count="2">
  <param name="column_labels" type="strings" const="true"/>
  <param name="series_id" type="int" const="true"/>
 </params>
<code>/* Either retrieve matrix' column labels, or
generate a new series name. */
if nelem(column_labels) &gt; 0
  return sprintf(&quot;%s&quot;, column_labels[series_id])
else
  return sprintf(&quot;v%d&quot;, series_id)
endif
</code>
</gretl-function>
<gretl-function name="valid_matrix" type="scalar" private="1">
 <params count="1">
  <param name="m" type="matrix" const="true"/>
 </params>
<code>if rows(m) == 0 || cols(m) == 0
  printf &quot;\nError: Empty matrix provided.\n&quot;
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="valid_filename" type="scalar" private="1">
 <params count="1">
  <param name="filename" type="string" const="true"/>
 </params>
<code>if strlen(filename) == 0
  printf &quot;\nError: Invalid filename.\n&quot;
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="map_uniq_str_to_int_series" type="series" private="1">
 <params count="1">
  <param name="S" type="strings" const="true"/>
 </params>
<code>/* Get unique string-values of array. Map each unique string value
in S to a unique integer and store vector as series. */
strings suniq = struniq(S)
matrix m = NA * ones(1, $tmax)
series s = NA
if nelem(S) != $tmax
  printf &quot;\nError: Dimension of 'row_labels' must equal number of observations.\n&quot;
  return s
elif nelem(suniq) == 0
  printf &quot;\nError: At least one empty string in 'row labels' of matrix.\n&quot;
  return s
endif
loop i=1..$tmax -q
  m[i] = strpos(suniq, S[i])
endloop
series s = m
return s
</code>
</gretl-function>
<sample-script>
set verbose off
clear

include mat2data.gfn --force

nulldata 3				# some dataset must be active

scalar n_rows = 5
matrix m = mnormal(n_rows, 5)
cnameset(m, &quot;A B C D E&quot;)
strings rnam = array(n_rows)
loop i=1..n_rows -q
    rnam[i] = sprintf(&quot;R%d&quot;, $i)
endloop
rnameset(m, rnam)
m[1,1] = NA

mat2data(m, &quot;foo.csv&quot;)

eval readfile(&quot;foo.csv&quot;)
open &quot;foo.csv&quot; -p -q
</sample-script>
</gretl-function-package>
</gretl-functions>
